

How did viewing a diff between two versions of a file help you see the bug that was introduced?

    Using the 'diff' command in the terminal helps me compare two version of files which may be 
    created at two different point of time. For example, a programmer after introducing some
    changes in his/her code needs to refer the original copy of the code to to omit any potential
    mistakes, he should use this command giving the old file name and new file name. This will
    compare each code file line by line and spot the difference along with the line numbers.

    Syntax: diff -u old_file.py new_file.py

----------------------------------------------------------------------------------------------------

How could having easy access to the entire history of a file make you a more efficient programmer
in the long term?
    
    Being the part of the rapidly changing technology a piece of code might need to go through
    several changes in order to be efficient during its lifecycle. But these changes might not
    be totally stable. A programmer has to experiment with the code to make it efficient. These 
    experiments sometimes, brings non desirable results. In that case, programmer need to refer
    to earlier versions of the code to revert back the changes.

----------------------------------------------------------------------------------------------------

What do you think are the pros and cons of manually choosing when to create a commit, like you do 
in Git, vs having versions automatically saved, like Google Docs does?

	Programmers are allowed to save each logical change according to his/ her own wish in each commit.
	It strikes off the possibilty of making too little changes or a huge changes. Whereas, version
	control system like Google docs saves the changes automatically which may or may not contain the 
	optimum amount of changes one logic needs.

---------------------------------------------------------------------------------------------------------

Why do you think some version control systems, like Git, allow saving multiple files in one commit,
while others, like Google Docs, treat each file separately?

	In an programming environment several files can be interrelated i.e., they are designed to function 
	together on a piece of logical structure. Keeping that in mind, git allows to save all the files in 
	the repository every time the programmer commits. Whereas Google Docs is not designed for a coding
    environment. It works for multimedia, documents, ordinary files e.g. photos, videos etc.

----------------------------------------------------------------------------------------------------------

How can you use the commands git log and git diff to view the history of files?
	
	'git log' command shows all the recent commits in the project with their commit IDs, time of commit 
	and commit message.

	'git diff commit ID#1 commit ID#2' command compares two commits and displays the changes made.

----------------------------------------------------------------------------------------------------------

How might using version control make you more confident to make changes that could break something?

	In case there is a bug in a program and I need to refer the particular commit which might have introduced
	it I can simply go back to the previous version of my project and find out the actual cause of it. 
	'git checkout' command helps me to revert back to any of the previous copy of my project.

----------------------------------------------------------------------------------------------------------

Now that you have your workspace set up, what do you want to try using Git for?

	I would like to use git for all my future projects.

----------------------------------------------------------------------------------------------------------


































